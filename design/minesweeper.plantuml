@startuml

abstract class Model {
    void attach(View view)
    void detach(View view)
    void notifyViews()
}

class Board {

    static const bombPlaceholder = -1
    int[][] boardElements
    boolean[][] coveredElems
    int selectedX, selectedY

    Board(int[][] board_arr)

    void select(int x, int y)
    void moveLeft()
    void moveRight()
    void moveUp()
    void moveDown()

    GameStatus uncover()

    int rows()
    int cols()
    boolean covered(int x, int y)
    int boardValue(int x, int y)
}

enum GameStatus {
    WIN
    LOSE
    CONTINUE
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

class GUIViewController {
    Board board

    GUIViewController(Board board)

    void update() override

    void paintComponent(Graphics g) override

    void keyPressed(KeyEvent e) override
    void keyReleased(KeyEvent e) override
    void keyTyped(KeyEvent e) override

    void mouseClicked(MouseEvent e) override
    void mouseEntered(MouseEvent e) override
    void mouseExited(MouseEvent e) override
    void mousePressed(MouseEvent e) override
    void mouseReleased(MouseEvent e) override
}

interface View {
    abstract void update()
}

class Game {
    Board board
    View view

    Game(Board board, View view)
}

interface java.awt.event.KeyListener
interface java.awt.event.MouseListener
class javax.swing.JPanel

interface Controller

Model <|-- Board
Controller <|-- GUIViewController
View <|-- GUIViewController
java.awt.event.KeyListener <|-- GUIViewController
java.awt.event.MouseListener <|-- GUIViewController
javax.swing.JPanel <|-- GUIViewController

@enduml
